name: Build Luanti for Raspberry Pi 5 (Static)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: debian:bullseye

    env:
      DEPS_INSTALL_DIR: ${{ github.workspace }}/deps/install
      TOOLCHAIN_FILE: ${{ github.workspace }}/toolchains/aarch64-linux-gnu.cmake

    steps:
    - name: Install build dependencies
      run: |
        apt-get update
        apt-get install -y --no-install-recommends \
          ca-certificates \
          g++-aarch64-linux-gnu \
          git \
          wget \
          build-essential \
          libx11-dev \
          libxxf86vm-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          pkg-config \
          ninja-build \
          libssl-dev
        
        # Install modern CMake
        wget -O cmake-linux.sh https://github.com/Kitware/CMake/releases/download/v3.27.7/cmake-3.27.7-linux-$(uname -m).sh
        sh cmake-linux.sh --skip-license --prefix=/usr
        rm cmake-linux.sh

    - name: Checkout Luanti source
      uses: actions/checkout@v3
      with:
        path: luanti

    - name: Create toolchain file
      run: |
        mkdir -p toolchains
        cat > toolchains/aarch64-linux-gnu.cmake <<'EOF'
        set(CMAKE_SYSTEM_NAME Linux)
        set(CMAKE_SYSTEM_PROCESSOR aarch64)
        
        set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
        set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
        
        set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
        set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
        set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
        set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
        
        set(CMAKE_C_FLAGS "-static -std=gnu11")
        set(CMAKE_CXX_FLAGS "-static -std=gnu++14")
        
        # Required for older compilers
        set(CMAKE_C_STANDARD 11)
        set(CMAKE_C_STANDARD_REQUIRED ON)
        set(CMAKE_CXX_STANDARD 14)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        EOF

    - name: Create directories for dependencies
      run: |
        mkdir -p deps/build deps/install

    - name: Build OpenAL-Soft
      run: |
        cd deps
        git clone --depth 1 --branch 1.23.1 https://github.com/kcat/openal-soft.git
        mkdir -p openal-soft/build
        cd openal-soft/build
        
        # Patch CMakeLists.txt to remove problematic generator expressions
        sed -i 's/\$<BUILD_LOCAL_INTERFACE:alsoft::fmt>//g' ../CMakeLists.txt
        
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN_FILE \
          -DCMAKE_INSTALL_PREFIX=$DEPS_INSTALL_DIR \
          -DCMAKE_FIND_ROOT_PATH=$DEPS_INSTALL_DIR \
          -DLIBTYPE=STATIC \
          -DALSOFT_EXAMPLES=OFF \
          -DALSOFT_UTILS=OFF \
          -DALSOFT_NO_CONFIG_UTIL=ON \
          -DALSOFT_INSTALL_CONFIG=OFF \
          -DALSOFT_REQUIRE_OPENSL=OFF \
          -DALSOFT_BACKEND_ALSA=OFF \
          -DALSOFT_BACKEND_PULSEAUDIO=OFF \
          -DALSOFT_BACKEND_JACK=OFF \
          -DALSOFT_BACKEND_COREAUDIO=OFF \
          -DALSOFT_BACKEND_WASAPI=OFF \
          -DALSOFT_BACKEND_WINMM=OFF \
          -DALSOFT_BACKEND_PORTAUDIO=OFF \
          -DALSOFT_BACKEND_DSOUND=OFF \
          -DALSOFT_BACKEND_SNDIO=OFF \
          -DALSOFT_BACKEND_OSS=OFF \
          -DALSOFT_BACKEND_SOLARIS=OFF \
          -DALSOFT_BACKEND_QSA=OFF \
          -DALSOFT_BACKEND_OPENSL=OFF \
          -DCMAKE_POLICY_DEFAULT_CMP0077=NEW \
          -G Ninja
        
        cmake --build . --target install
        
    - name: Build libjpeg-turbo
      run: |
        cd deps
        wget -4 https://github.com/libjpeg-turbo/libjpeg-turbo/archive/refs/tags/3.0.2.tar.gz -O libjpeg-turbo-3.0.2.tar.gz
        tar xf libjpeg-turbo-3.0.2.tar.gz
        cd libjpeg-turbo-3.0.2
        mkdir build && cd build
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN_FILE \
          -DCMAKE_INSTALL_PREFIX=$DEPS_INSTALL_DIR \
          -DENABLE_SHARED=OFF \
          -DENABLE_STATIC=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DWITH_TURBOJPEG=OFF
        make install

    - name: Build zlib (fixed)
      run: |
        cd deps
        wget -4 https://www.zlib.net/zlib-1.3.1.tar.gz
        tar xf zlib-1.3.1.tar.gz
        cd zlib-1.3.1
        
        # Clean build environment
        make distclean
        
        # Configure with cross-compiler
        CHOST=aarch64-linux-gnu ./configure \
          --static \
          --prefix=$DEPS_INSTALL_DIR
        
        # Build with cross-compiler
        make CC="aarch64-linux-gnu-gcc" AR="aarch64-linux-gnu-ar" RANLIB="aarch64-linux-gnu-ranlib" STRIP="aarch64-linux-gnu-strip"
        make install

    - name: Build libpng (with explicit zlib linking)
      run: |
        cd deps
        wget -4 https://download.sourceforge.net/libpng/libpng-1.6.43.tar.gz
        tar xf libpng-1.6.43.tar.gz
        cd libpng-1.6.43
        
        # Manually specify zlib location
        export ZLIB_CFLAGS="-I$DEPS_INSTALL_DIR/include"
        export ZLIB_LIBS="-L$DEPS_INSTALL_DIR/lib -lz"
        
        ./configure \
          --host=aarch64-linux-gnu \
          --prefix=$DEPS_INSTALL_DIR \
          --enable-static \
          --disable-shared \
          CC="aarch64-linux-gnu-gcc" \
          CXX="aarch64-linux-gnu-g++" \
          AR="aarch64-linux-gnu-ar" \
          RANLIB="aarch64-linux-gnu-ranlib" \
          STRIP="aarch64-linux-gnu-strip" \
          CFLAGS="$ZLIB_CFLAGS" \
          LDFLAGS="$ZLIB_LIBS"
        
        make
        make install

    - name: Build IrrlichtMt (with PNG support)
      run: |
        cd deps
        git clone --depth 1 https://github.com/minetest/irrlicht.git
        cd irrlicht
        mkdir build && cd build
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN_FILE \
          -DCMAKE_INSTALL_PREFIX=$DEPS_INSTALL_DIR \
          -DCMAKE_FIND_ROOT_PATH=$DEPS_INSTALL_DIR \
          -DBUILD_SHARED_LIBS=OFF \
          -DIRRLICHT_BUILD_STATIC=ON \
          -DZLIB_LIBRARY=$DEPS_INSTALL_DIR/lib/libz.a \
          -DZLIB_INCLUDE_DIR=$DEPS_INSTALL_DIR/include \
          -DJPEG_LIBRARY=$DEPS_INSTALL_DIR/lib/libjpeg.a \
          -DJPEG_INCLUDE_DIR=$DEPS_INSTALL_DIR/include \
          -DPNG_LIBRARY=$DEPS_INSTALL_DIR/lib/libpng.a \
          -DPNG_PNG_INCLUDE_DIR=$DEPS_INSTALL_DIR/include
        make install

    - name: Build Luanti (with explicit ZLIB paths)
      run: |
        cd luanti
        cmake . -B build \
          -DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN_FILE \
          -DCMAKE_FIND_ROOT_PATH=$DEPS_INSTALL_DIR \
          -DENABLE_GETTEXT=OFF \
          -DENABLE_LUAJIT=ON \
          -DENABLE_SOUND=ON \
          -DENABLE_CURL=ON \
          -DENABLE_FREETYPE=ON \
          -DBUILD_SERVER=OFF \
          -DBUILD_CLIENT=ON \
          -DVERSION_EXTRA=RPI5-STATIC \
          -DCMAKE_PREFIX_PATH=$DEPS_INSTALL_DIR \
          -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++" \
          -DCMAKE_INSTALL_PREFIX=./install \
          -DCMAKE_BUILD_TYPE=Release \
          -DZLIB_LIBRARY=$DEPS_INSTALL_DIR/lib/libz.a \
          -DZLIB_INCLUDE_DIR=$DEPS_INSTALL_DIR/include
        cmake --build build -j$(nproc) --target install

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: luanti-rpi5-static
        path: luanti/install/bin/luanti
