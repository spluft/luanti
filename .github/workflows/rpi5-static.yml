name: Build Luanti for Raspberry Pi 5 (Static)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04-arm  # Native ARM runner
    timeout-minutes: 90

    env:
      DEPS_INSTALL_DIR: ${{ github.workspace }}/deps/install

    steps:
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          git \
          wget \
          autoconf \
          automake \
          libtool \
          pkg-config \
          libx11-dev \
          libxxf86vm-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libsdl2-dev

        # Install modern CMake
        wget -O cmake-linux.sh https://github.com/Kitware/CMake/releases/download/v3.27.7/cmake-3.27.7-linux-$(uname -m).sh
        sudo sh cmake-linux.sh --skip-license --prefix=/usr
        rm cmake-linux.sh

    - name: Checkout Luanti source
      uses: actions/checkout@v4
      with:
        path: luanti

    - name: Create directories for dependencies
      run: |
        mkdir -p deps deps/build deps/install

    - name: Build zlib
      run: |
        cd deps
        wget -q https://www.zlib.net/zlib-1.3.1.tar.gz
        tar xf zlib-1.3.1.tar.gz
        cd zlib-1.3.1
        
        ./configure --static --prefix=$DEPS_INSTALL_DIR
        
        make -j$(nproc)
        make install

    - name: Build SQLite3
      run: |
        cd deps
        wget -q https://www.sqlite.org/2023/sqlite-autoconf-3430200.tar.gz
        tar xf sqlite-autoconf-3430200.tar.gz
        cd sqlite-autoconf-3430200
        
        ./configure \
          --disable-shared \
          --enable-static \
          --prefix=$DEPS_INSTALL_DIR
        
        make -j$(nproc)
        make install

    - name: Build LuaJIT
      run: |
        cd deps
        git clone https://luajit.org/git/luajit.git
        cd luajit
        git checkout v2.1
        
        make HOST_CC="gcc" \
          TARGET_CFLAGS="-static" \
          TARGET_LDFLAGS="-static" \
          BUILDMODE="static" \
          PREFIX=$DEPS_INSTALL_DIR \
          -j$(nproc) install

    - name: Build cURL
      run: |
        cd deps
        wget -q https://curl.se/download/curl-8.4.0.tar.gz
        tar xf curl-8.4.0.tar.gz
        cd curl-8.4.0
        
        ./configure \
          --disable-shared \
          --enable-static \
          --prefix=$DEPS_INSTALL_DIR \
          --with-zlib=$DEPS_INSTALL_DIR \
          --without-ssl
        
        make -j$(nproc)
        make install

    - name: Build Freetype
      run: |
        cd deps
        wget -q https://download.savannah.gnu.org/releases/freetype/freetype-2.13.2.tar.gz
        tar xf freetype-2.13.2.tar.gz
        cd freetype-2.13.2
        
        ./configure \
          --disable-shared \
          --enable-static \
          --prefix=$DEPS_INSTALL_DIR \
          --with-zlib=no
        
        make -j$(nproc)
        make install

    - name: Build OpenAL-Soft (fixed)
      run: |
        cd deps
        # Remove existing directory to avoid conflicts
        rm -rf openal-soft
        
        git clone https://github.com/kcat/openal-soft.git
        cd openal-soft
        git checkout 1.23.1
        
        # Patch to remove problematic generator expressions
        sed -i 's/\$<BUILD_LOCAL_INTERFACE:alsoft::fmt>//g' CMakeLists.txt
        
        # Create build directory (remove first if exists)
        rm -rf build
        mkdir build
        cd build
        
        cmake .. \
          -DCMAKE_INSTALL_PREFIX=$DEPS_INSTALL_DIR \
          -DLIBTYPE=STATIC \
          -DALSOFT_EXAMPLES=OFF \
          -DALSOFT_UTILS=OFF \
          -DALSOFT_NO_CONFIG_UTIL=ON
        
        cmake --build . -j$(nproc) --target install

    - name: Build Ogg
      run: |
        cd deps
        wget -q https://downloads.xiph.org/releases/ogg/libogg-1.3.5.tar.gz
        tar xf libogg-1.3.5.tar.gz
        cd libogg-1.3.5
        
        ./configure \
          --disable-shared \
          --enable-static \
          --prefix=$DEPS_INSTALL_DIR
        
        make -j$(nproc)
        make install

    - name: Build libvorbis
      run: |
        cd deps
        wget -q https://downloads.xiph.org/releases/vorbis/libvorbis-1.3.7.tar.gz
        tar xf libvorbis-1.3.7.tar.gz
        cd libvorbis-1.3.7
        
        ./configure \
          --disable-shared \
          --enable-static \
          --prefix=$DEPS_INSTALL_DIR \
          --with-ogg=$DEPS_INSTALL_DIR
        
        make -j$(nproc)
        make install

    - name: Build GMP
      run: |
        cd deps
        wget -q https://gmplib.org/download/gmp/gmp-6.3.0.tar.xz
        tar xf gmp-6.3.0.tar.xz
        cd gmp-6.3.0
        
        ./configure \
          --disable-shared \
          --enable-static \
          --prefix=$DEPS_INSTALL_DIR
        
        make -j$(nproc)
        make install

    - name: Build json-c
      run: |
        cd deps
        rm -rf json-c
        git clone https://github.com/json-c/json-c.git
        cd json-c
        git checkout json-c-0.17
        mkdir build
        cd build
        
        cmake .. \
          -DCMAKE_INSTALL_PREFIX=$DEPS_INSTALL_DIR \
          -DBUILD_SHARED_LIBS=OFF
        
        cmake --build . -j$(nproc) --target install

    - name: Build zstd
      run: |
        cd deps
        wget -q https://github.com/facebook/zstd/releases/download/v1.5.5/zstd-1.5.5.tar.gz
        tar xf zstd-1.5.5.tar.gz
        cd zstd-1.5.5
        
        make -C build/cmake \
          BUILD_SHARED=OFF \
          ZSTD_BUILD_SHARED=OFF \
          CMAKE_INSTALL_PREFIX=$DEPS_INSTALL_DIR
        
        make -C build/cmake install

    - name: Build IrrlichtMt
      run: |
        cd deps
        rm -rf irrlicht
        git clone https://github.com/minetest/irrlicht.git
        cd irrlicht
        git checkout master
        rm -rf build
        mkdir build
        cd build
        
        cmake .. \
          -DCMAKE_INSTALL_PREFIX=$DEPS_INSTALL_DIR \
          -DBUILD_SHARED_LIBS=OFF \
          -DIRRLICHT_BUILD_STATIC=ON \
          -DCMAKE_BUILD_TYPE=Release
        
        make -j$(nproc) install

    - name: Build Luanti
      run: |
        cd luanti
        cmake . -B build \
          -DENABLE_GETTEXT=OFF \
          -DENABLE_LUAJIT=ON \
          -DENABLE_SOUND=ON \
          -DENABLE_CURL=ON \
          -DENABLE_FREETYPE=ON \
          -DBUILD_SERVER=OFF \
          -DBUILD_CLIENT=ON \
          -DVERSION_EXTRA=RPI5-STATIC \
          -DCMAKE_PREFIX_PATH=$DEPS_INSTALL_DIR \
          -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++ -Wl,--whole-archive -lpthread -Wl,--no-whole-archive" \
          -DCMAKE_INSTALL_PREFIX=./install \
          -DCMAKE_BUILD_TYPE=Release
        
        cmake --build build -j$(nproc) --target install

    - name: Verify static executable
      run: |
        file luanti/install/bin/luanti
        echo "Dynamic dependencies:"
        ! readelf -d luanti/install/bin/luanti | grep NEEDED || exit 1
        echo "Static build verification passed!"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: luanti-rpi5-static
        path: luanti/install/bin/luanti
